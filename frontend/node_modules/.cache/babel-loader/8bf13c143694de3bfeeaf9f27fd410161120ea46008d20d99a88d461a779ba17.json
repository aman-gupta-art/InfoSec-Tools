{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pimsupport\\\\Desktop\\\\Projects\\\\PROD\\\\InfoSec Tools_FROM_START\\\\InfoSec-Tools\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext.tsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const {\n    user,\n    token\n  } = (useAuth === null || useAuth === void 0 ? void 0 : useAuth()) || {\n    user: null,\n    token: null\n  };\n\n  // Initialize theme from localStorage or user preference\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.uiTheme) {\n      // If user has a preference, use it\n      setTheme(user.uiTheme);\n    } else {\n      // Otherwise try to get from localStorage\n      const savedTheme = localStorage.getItem('theme');\n      if (savedTheme) {\n        setTheme(savedTheme);\n      } else {\n        // Or set based on system preference\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n          setTheme('dark');\n        }\n      }\n    }\n  }, [user]);\n\n  // Apply theme class to document\n  useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  // Toggle theme\n  const toggleTheme = async () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n\n    // Save to localStorage\n    localStorage.setItem('theme', newTheme);\n\n    // If user is logged in, save preference to account\n    if (token && user) {\n      try {\n        await axios.post('/api/auth/update-theme', {\n          theme: newTheme\n        });\n      } catch (error) {\n        console.error('Failed to update theme preference:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"l0NnHMBAjTNA2m05PT0LPL3eOKc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","useAuth","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","user","token","uiTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","add","remove","toggleTheme","newTheme","setItem","post","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/InfoSec Tools_FROM_START/InfoSec-Tools/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext.tsx';\r\n\r\ntype ThemeType = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: ThemeType;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<ThemeType>('light');\r\n  const { user, token } = useAuth?.() || { user: null, token: null };\r\n\r\n  // Initialize theme from localStorage or user preference\r\n  useEffect(() => {\r\n    if (user?.uiTheme) {\r\n      // If user has a preference, use it\r\n      setTheme(user.uiTheme as ThemeType);\r\n    } else {\r\n      // Otherwise try to get from localStorage\r\n      const savedTheme = localStorage.getItem('theme') as ThemeType | null;\r\n      if (savedTheme) {\r\n        setTheme(savedTheme);\r\n      } else {\r\n        // Or set based on system preference\r\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n          setTheme('dark');\r\n        }\r\n      }\r\n    }\r\n  }, [user]);\r\n\r\n  // Apply theme class to document\r\n  useEffect(() => {\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  // Toggle theme\r\n  const toggleTheme = async () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('theme', newTheme);\r\n    \r\n    // If user is logged in, save preference to account\r\n    if (token && user) {\r\n      try {\r\n        await axios.post('/api/auth/update-theme', {\r\n          theme: newTheme\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to update theme preference:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}