{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Server related API calls\nexport const serverApi = {\n  // Get servers with optional query parameters\n  getServers: params => {\n    // Handle both string and URLSearchParams objects\n    const queryString = params instanceof URLSearchParams ? params.toString() : params;\n    return api.get(`/servers?${queryString}`);\n  },\n  // Get a single server by ID\n  getServer: id => api.get(`/servers/${id}`),\n  // Create a new server\n  createServer: serverData => api.post('/servers', serverData),\n  // Update an existing server\n  updateServer: (id, serverData) => api.put(`/servers/${id}`, serverData),\n  // Delete a server\n  deleteServer: id => api.delete(`/servers/${id}`),\n  // Import servers from Excel file\n  importServers: formData => api.post('/servers/import', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  // Export servers to Excel\n  exportServers: () => api.get('/servers/export', {\n    responseType: 'blob'\n  }),\n  // Download template for server import\n  downloadTemplate: () => api.get('/servers/template', {\n    responseType: 'blob'\n  }),\n  // Clear all servers (admin only)\n  clearAllServers: () => api.delete('/servers/clear'),\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  }\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users\n  getUsers: () => api.get('/users'),\n  // Get a single user by ID\n  getUser: id => api.get(`/users/${id}`),\n  // Create a new user\n  createUser: userData => api.post('/users', userData),\n  // Update an existing user\n  updateUser: (id, userData) => api.put(`/users/${id}`, userData),\n  // Delete a user\n  deleteUser: id => api.delete(`/users/${id}`)\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: credentials => api.post('/auth/login', credentials),\n  // Register\n  register: userData => api.post('/auth/register', userData),\n  // Get current user profile\n  getProfile: () => api.get('/auth/profile'),\n  // Update user profile\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  // Change password\n  changePassword: passwordData => api.put('/auth/change-password', passwordData),\n  // Logout\n  logout: () => api.post('/auth/logout'),\n  // Refresh token\n  refreshToken: () => api.post('/auth/refresh-token')\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: params => {\n    const queryString = new URLSearchParams(params).toString();\n    return api.get(`/activity-logs?${queryString}`);\n  },\n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  // Get a single log by ID\n  getLog: id => api.get(`/activity-logs/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","serverApi","getServers","params","queryString","URLSearchParams","toString","get","getServer","id","createServer","serverData","post","updateServer","put","deleteServer","delete","importServers","formData","exportServers","responseType","downloadTemplate","clearAllServers","getDashboardStats","userApi","getUsers","getUser","createUser","userData","updateUser","deleteUser","authApi","login","credentials","register","getProfile","updateProfile","profileData","changePassword","passwordData","logout","refreshToken","activityLogApi","getLogs","getLogStats","getLog"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/InfoSec-Tools/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true,\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Server related API calls\nexport const serverApi = {\n  // Get servers with optional query parameters\n  getServers: (params: string | URLSearchParams) => {\n    // Handle both string and URLSearchParams objects\n    const queryString = params instanceof URLSearchParams ? params.toString() : params;\n    return api.get(`/servers?${queryString}`);\n  },\n  \n  // Get a single server by ID\n  getServer: (id: number) => api.get(`/servers/${id}`),\n  \n  // Create a new server\n  createServer: (serverData: any) => api.post('/servers', serverData),\n  \n  // Update an existing server\n  updateServer: (id: number, serverData: any) => api.put(`/servers/${id}`, serverData),\n  \n  // Delete a server\n  deleteServer: (id: number) => api.delete(`/servers/${id}`),\n  \n  // Import servers from Excel file\n  importServers: (formData: FormData) => api.post('/servers/import', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n  \n  // Export servers to Excel\n  exportServers: () => api.get('/servers/export', { responseType: 'blob' }),\n  \n  // Download template for server import\n  downloadTemplate: () => api.get('/servers/template', { responseType: 'blob' }),\n  \n  // Clear all servers (admin only)\n  clearAllServers: () => api.delete('/servers/clear'),\n  \n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  },\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users\n  getUsers: () => api.get('/users'),\n  \n  // Get a single user by ID\n  getUser: (id: number) => api.get(`/users/${id}`),\n  \n  // Create a new user\n  createUser: (userData: any) => api.post('/users', userData),\n  \n  // Update an existing user\n  updateUser: (id: number, userData: any) => api.put(`/users/${id}`, userData),\n  \n  // Delete a user\n  deleteUser: (id: number) => api.delete(`/users/${id}`),\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: (credentials: { email: string; password: string }) => api.post('/auth/login', credentials),\n  \n  // Register\n  register: (userData: any) => api.post('/auth/register', userData),\n  \n  // Get current user profile\n  getProfile: () => api.get('/auth/profile'),\n  \n  // Update user profile\n  updateProfile: (profileData: any) => api.put('/auth/profile', profileData),\n  \n  // Change password\n  changePassword: (passwordData: { oldPassword: string; newPassword: string }) => api.put('/auth/change-password', passwordData),\n  \n  // Logout\n  logout: () => api.post('/auth/logout'),\n  \n  // Refresh token\n  refreshToken: () => api.post('/auth/refresh-token'),\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: (params: any) => {\n    const queryString = new URLSearchParams(params).toString();\n    return api.get(`/activity-logs?${queryString}`);\n  },\n  \n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  \n  // Get a single log by ID\n  getLog: (id: number) => api.get(`/activity-logs/${id}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}