{"ast":null,"code":"import axios from'axios';// Create an axios instance with default config\nconst api=axios.create({baseURL:'/api',headers:{'Content-Type':'application/json'}});// Add a request interceptor to include auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// Server related API calls\nexport const serverApi={// Get all servers with pagination and filters\ngetServers:async params=>{return api.get('/servers',{params});},// Get a single server by ID\ngetServer:async id=>{return api.get(\"/servers/\".concat(id));},// Create a new server\ncreateServer:async serverData=>{return api.post('/servers',serverData);},// Update an existing server\nupdateServer:async(id,serverData)=>{return api.put(\"/servers/\".concat(id),serverData);},// Delete a server\ndeleteServer:async id=>{return api.delete(\"/servers/\".concat(id));},// Import servers from Excel file\nimportServers:async formData=>{return api.post('/servers/import',formData,{headers:{'Content-Type':'multipart/form-data'}});},// Get import template\ngetImportTemplate:async()=>{return api.get('/servers/import-template',{responseType:'blob'});},// Export servers to Excel\nexportServers:async params=>{return api.get('/servers/export',{params,responseType:'blob'});},// Get dashboard statistics\ngetDashboardStats:async()=>{return api.get('/servers/dashboard-stats');},// Clear all servers (admin only)\nclearAllServers:async()=>{return api.delete('/servers/clear-all');}};// User related API calls\nexport const userApi={// Get all users\ngetUsers:async()=>{return api.get('/users');},// Get a single user by ID\ngetUser:async id=>{return api.get(\"/users/\".concat(id));},// Create a new user\ncreateUser:async userData=>{return api.post('/auth/register',userData);},// Update an existing user\nupdateUser:async(id,userData)=>{return api.put(\"/users/\".concat(id),userData);},// Delete a user\ndeleteUser:async id=>{return api.delete(\"/users/\".concat(id));}};// Auth related API calls\nexport const authApi={// Login\nlogin:async credentials=>{return api.post('/auth/login',credentials);},// Register\nregister:async userData=>{return api.post('/auth/register',userData);},// Get current user profile\ngetProfile:async()=>{return api.get('/auth/profile');},// Update user profile\nupdateProfile:async profileData=>{return api.put('/auth/profile',profileData);},// Change password\nchangePassword:async passwordData=>{return api.put('/auth/change-password',passwordData);}};// Activity log related API calls\nexport const activityLogApi={// Get all logs with pagination and filters\ngetLogs:async params=>{return api.get('/activity-logs',{params});},// Get log statistics\ngetLogStats:async()=>{return api.get('/activity-logs/stats');},// Export logs to Excel\nexportLogs:async params=>{return api.get('/activity-logs/export',{params,responseType:'blob'});},// Clear all logs (admin only)\nclearAllLogs:async()=>{return api.delete('/activity-logs/clear-all');}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","serverApi","getServers","params","get","getServer","id","createServer","serverData","post","updateServer","put","deleteServer","delete","importServers","formData","getImportTemplate","responseType","exportServers","getDashboardStats","clearAllServers","userApi","getUsers","getUser","createUser","userData","updateUser","deleteUser","authApi","login","credentials","register","getProfile","updateProfile","profileData","changePassword","passwordData","activityLogApi","getLogs","getLogStats","exportLogs","clearAllLogs"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/NEW_1/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Server related API calls\nexport const serverApi = {\n  // Get all servers with pagination and filters\n  getServers: async (params) => {\n    return api.get('/servers', { params });\n  },\n  \n  // Get a single server by ID\n  getServer: async (id) => {\n    return api.get(`/servers/${id}`);\n  },\n  \n  // Create a new server\n  createServer: async (serverData) => {\n    return api.post('/servers', serverData);\n  },\n  \n  // Update an existing server\n  updateServer: async (id, serverData) => {\n    return api.put(`/servers/${id}`, serverData);\n  },\n  \n  // Delete a server\n  deleteServer: async (id) => {\n    return api.delete(`/servers/${id}`);\n  },\n  \n  // Import servers from Excel file\n  importServers: async (formData) => {\n    return api.post('/servers/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n  \n  // Get import template\n  getImportTemplate: async () => {\n    return api.get('/servers/import-template', {\n      responseType: 'blob',\n    });\n  },\n  \n  // Export servers to Excel\n  exportServers: async (params) => {\n    return api.get('/servers/export', {\n      params,\n      responseType: 'blob',\n    });\n  },\n  \n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  },\n  \n  // Clear all servers (admin only)\n  clearAllServers: async () => {\n    return api.delete('/servers/clear-all');\n  }\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users\n  getUsers: async () => {\n    return api.get('/users');\n  },\n  \n  // Get a single user by ID\n  getUser: async (id) => {\n    return api.get(`/users/${id}`);\n  },\n  \n  // Create a new user\n  createUser: async (userData) => {\n    return api.post('/auth/register', userData);\n  },\n  \n  // Update an existing user\n  updateUser: async (id, userData) => {\n    return api.put(`/users/${id}`, userData);\n  },\n  \n  // Delete a user\n  deleteUser: async (id) => {\n    return api.delete(`/users/${id}`);\n  }\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: async (credentials) => {\n    return api.post('/auth/login', credentials);\n  },\n  \n  // Register\n  register: async (userData) => {\n    return api.post('/auth/register', userData);\n  },\n  \n  // Get current user profile\n  getProfile: async () => {\n    return api.get('/auth/profile');\n  },\n  \n  // Update user profile\n  updateProfile: async (profileData) => {\n    return api.put('/auth/profile', profileData);\n  },\n  \n  // Change password\n  changePassword: async (passwordData) => {\n    return api.put('/auth/change-password', passwordData);\n  }\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: async (params) => {\n    return api.get('/activity-logs', { params });\n  },\n  \n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  \n  // Export logs to Excel\n  exportLogs: async (params) => {\n    return api.get('/activity-logs/export', {\n      params,\n      responseType: 'blob',\n    });\n  },\n  \n  // Clear all logs (admin only)\n  clearAllLogs: async () => {\n    return api.delete('/activity-logs/clear-all');\n  }\n};\n\nexport default api; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAE,MAAM,CACfC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,WAAAC,MAAA,CAAaJ,KAAK,CAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAM,KAAK,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,SAAS,CAAG,CACvB;AACAC,UAAU,CAAE,KAAO,CAAAC,MAAM,EAAK,CAC5B,MAAO,CAAAlB,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAE,CAAED,MAAO,CAAC,CAAC,CACxC,CAAC,CAED;AACAE,SAAS,CAAE,KAAO,CAAAC,EAAE,EAAK,CACvB,MAAO,CAAArB,GAAG,CAACmB,GAAG,aAAAP,MAAA,CAAaS,EAAE,CAAE,CAAC,CAClC,CAAC,CAED;AACAC,YAAY,CAAE,KAAO,CAAAC,UAAU,EAAK,CAClC,MAAO,CAAAvB,GAAG,CAACwB,IAAI,CAAC,UAAU,CAAED,UAAU,CAAC,CACzC,CAAC,CAED;AACAE,YAAY,CAAE,KAAAA,CAAOJ,EAAE,CAAEE,UAAU,GAAK,CACtC,MAAO,CAAAvB,GAAG,CAAC0B,GAAG,aAAAd,MAAA,CAAaS,EAAE,EAAIE,UAAU,CAAC,CAC9C,CAAC,CAED;AACAI,YAAY,CAAE,KAAO,CAAAN,EAAE,EAAK,CAC1B,MAAO,CAAArB,GAAG,CAAC4B,MAAM,aAAAhB,MAAA,CAAaS,EAAE,CAAE,CAAC,CACrC,CAAC,CAED;AACAQ,aAAa,CAAE,KAAO,CAAAC,QAAQ,EAAK,CACjC,MAAO,CAAA9B,GAAG,CAACwB,IAAI,CAAC,iBAAiB,CAAEM,QAAQ,CAAE,CAC3C3B,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAAC,CACJ,CAAC,CAED;AACA4B,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,MAAO,CAAA/B,GAAG,CAACmB,GAAG,CAAC,0BAA0B,CAAE,CACzCa,YAAY,CAAE,MAChB,CAAC,CAAC,CACJ,CAAC,CAED;AACAC,aAAa,CAAE,KAAO,CAAAf,MAAM,EAAK,CAC/B,MAAO,CAAAlB,GAAG,CAACmB,GAAG,CAAC,iBAAiB,CAAE,CAChCD,MAAM,CACNc,YAAY,CAAE,MAChB,CAAC,CAAC,CACJ,CAAC,CAED;AACAE,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,MAAO,CAAAlC,GAAG,CAACmB,GAAG,CAAC,0BAA0B,CAAC,CAC5C,CAAC,CAED;AACAgB,eAAe,CAAE,KAAAA,CAAA,GAAY,CAC3B,MAAO,CAAAnC,GAAG,CAAC4B,MAAM,CAAC,oBAAoB,CAAC,CACzC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,OAAO,CAAG,CACrB;AACAC,QAAQ,CAAE,KAAAA,CAAA,GAAY,CACpB,MAAO,CAAArC,GAAG,CAACmB,GAAG,CAAC,QAAQ,CAAC,CAC1B,CAAC,CAED;AACAmB,OAAO,CAAE,KAAO,CAAAjB,EAAE,EAAK,CACrB,MAAO,CAAArB,GAAG,CAACmB,GAAG,WAAAP,MAAA,CAAWS,EAAE,CAAE,CAAC,CAChC,CAAC,CAED;AACAkB,UAAU,CAAE,KAAO,CAAAC,QAAQ,EAAK,CAC9B,MAAO,CAAAxC,GAAG,CAACwB,IAAI,CAAC,gBAAgB,CAAEgB,QAAQ,CAAC,CAC7C,CAAC,CAED;AACAC,UAAU,CAAE,KAAAA,CAAOpB,EAAE,CAAEmB,QAAQ,GAAK,CAClC,MAAO,CAAAxC,GAAG,CAAC0B,GAAG,WAAAd,MAAA,CAAWS,EAAE,EAAImB,QAAQ,CAAC,CAC1C,CAAC,CAED;AACAE,UAAU,CAAE,KAAO,CAAArB,EAAE,EAAK,CACxB,MAAO,CAAArB,GAAG,CAAC4B,MAAM,WAAAhB,MAAA,CAAWS,EAAE,CAAE,CAAC,CACnC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,OAAO,CAAG,CACrB;AACAC,KAAK,CAAE,KAAO,CAAAC,WAAW,EAAK,CAC5B,MAAO,CAAA7C,GAAG,CAACwB,IAAI,CAAC,aAAa,CAAEqB,WAAW,CAAC,CAC7C,CAAC,CAED;AACAC,QAAQ,CAAE,KAAO,CAAAN,QAAQ,EAAK,CAC5B,MAAO,CAAAxC,GAAG,CAACwB,IAAI,CAAC,gBAAgB,CAAEgB,QAAQ,CAAC,CAC7C,CAAC,CAED;AACAO,UAAU,CAAE,KAAAA,CAAA,GAAY,CACtB,MAAO,CAAA/C,GAAG,CAACmB,GAAG,CAAC,eAAe,CAAC,CACjC,CAAC,CAED;AACA6B,aAAa,CAAE,KAAO,CAAAC,WAAW,EAAK,CACpC,MAAO,CAAAjD,GAAG,CAAC0B,GAAG,CAAC,eAAe,CAAEuB,WAAW,CAAC,CAC9C,CAAC,CAED;AACAC,cAAc,CAAE,KAAO,CAAAC,YAAY,EAAK,CACtC,MAAO,CAAAnD,GAAG,CAAC0B,GAAG,CAAC,uBAAuB,CAAEyB,YAAY,CAAC,CACvD,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B;AACAC,OAAO,CAAE,KAAO,CAAAnC,MAAM,EAAK,CACzB,MAAO,CAAAlB,GAAG,CAACmB,GAAG,CAAC,gBAAgB,CAAE,CAAED,MAAO,CAAC,CAAC,CAC9C,CAAC,CAED;AACAoC,WAAW,CAAE,KAAAA,CAAA,GAAY,CACvB,MAAO,CAAAtD,GAAG,CAACmB,GAAG,CAAC,sBAAsB,CAAC,CACxC,CAAC,CAED;AACAoC,UAAU,CAAE,KAAO,CAAArC,MAAM,EAAK,CAC5B,MAAO,CAAAlB,GAAG,CAACmB,GAAG,CAAC,uBAAuB,CAAE,CACtCD,MAAM,CACNc,YAAY,CAAE,MAChB,CAAC,CAAC,CACJ,CAAC,CAED;AACAwB,YAAY,CAAE,KAAAA,CAAA,GAAY,CACxB,MAAO,CAAAxD,GAAG,CAAC4B,MAAM,CAAC,0BAA0B,CAAC,CAC/C,CACF,CAAC,CAED,cAAe,CAAA5B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}