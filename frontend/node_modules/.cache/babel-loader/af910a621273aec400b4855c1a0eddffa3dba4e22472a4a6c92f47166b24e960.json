{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pimsupport\\\\Desktop\\\\Projects\\\\PROD\\\\NEW_1\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    // Get from localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else {\n      // Or set based on system preference\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        setTheme('dark');\n      }\n    }\n  }, []);\n\n  // Apply theme class to document\n  useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  // Toggle theme\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n\n    // Save to localStorage\n    localStorage.setItem('theme', newTheme);\n  };\n\n  // Update user theme preference in database\n  const updateUserTheme = async (userId, newTheme) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        await axios.post('/api/auth/update-theme', {\n          theme: newTheme\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update theme preference:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme,\n      updateUserTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"l0NnHMBAjTNA2m05PT0LPL3eOKc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","add","remove","toggleTheme","newTheme","setItem","updateUserTheme","userId","token","post","headers","Authorization","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/NEW_1/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\ntype ThemeType = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: ThemeType;\r\n  toggleTheme: () => void;\r\n  updateUserTheme: (userId: number, theme: ThemeType) => Promise<void>;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<ThemeType>('light');\r\n\r\n  // Initialize theme from localStorage or system preference\r\n  useEffect(() => {\r\n    // Get from localStorage\r\n    const savedTheme = localStorage.getItem('theme') as ThemeType | null;\r\n    if (savedTheme) {\r\n      setTheme(savedTheme);\r\n    } else {\r\n      // Or set based on system preference\r\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n        setTheme('dark');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Apply theme class to document\r\n  useEffect(() => {\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  // Toggle theme\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('theme', newTheme);\r\n  };\r\n\r\n  // Update user theme preference in database\r\n  const updateUserTheme = async (userId: number, newTheme: ThemeType) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        await axios.post('/api/auth/update-theme', {\r\n          theme: newTheme\r\n        }, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update theme preference:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme, updateUserTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU1B,MAAMC,YAAY,gBAAGP,aAAa,CAA+BQ,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAsD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAY,OAAO,CAAC;;EAEtD;EACAE,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAqB;IACpE,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAACC,UAAU,CAAC;IACtB,CAAC,MAAM;MACL;MACA,IAAIG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;QAC7DN,QAAQ,CAAC,MAAM,CAAC;MAClB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAV,SAAS,CAAC,MAAM;IACd,IAAIS,KAAK,KAAK,MAAM,EAAE;MACpBQ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACZ,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGd,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACa,QAAQ,CAAC;;IAElB;IACAX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;EACzC,CAAC;;EAED;EACA,MAAME,eAAe,GAAG,MAAAA,CAAOC,MAAc,EAAEH,QAAmB,KAAK;IACrE,IAAI;MACF,MAAMI,KAAK,GAAGf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIc,KAAK,EAAE;QACT,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,wBAAwB,EAAE;UACzCnB,KAAK,EAAEc;QACT,CAAC,EAAE;UACDM,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUH,KAAK;UAAG;QAC9C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED,oBACE5B,OAAA,CAACC,YAAY,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,KAAK;MAAEa,WAAW;MAAEG;IAAgB,CAAE;IAAAlB,QAAA,EACnEA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC9B,EAAA,CAxDWF,aAAsD;AAAAiC,EAAA,GAAtDjC,aAAsD;AA0DnE,OAAO,MAAMkC,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAG3C,UAAU,CAACK,YAAY,CAAC;EACxC,IAAIsC,OAAO,KAAKrC,SAAS,EAAE;IACzB,MAAM,IAAIsC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}