{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Server related API calls\nexport const serverApi = {\n  // Get all servers with pagination and filters\n  getServers: async params => {\n    return api.get('/servers', {\n      params\n    });\n  },\n  // Get a single server by ID\n  getServer: async id => {\n    return api.get(`/servers/${id}`);\n  },\n  // Create a new server\n  createServer: async serverData => {\n    return api.post('/servers', serverData);\n  },\n  // Update an existing server\n  updateServer: async (id, serverData) => {\n    return api.put(`/servers/${id}`, serverData);\n  },\n  // Delete a server\n  deleteServer: async id => {\n    return api.delete(`/servers/${id}`);\n  },\n  // Import servers from Excel file\n  importServers: async formData => {\n    return api.post('/servers/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get import template\n  getImportTemplate: async () => {\n    return api.get('/servers/import-template', {\n      responseType: 'blob'\n    });\n  },\n  // Export servers to Excel\n  exportServers: async params => {\n    return api.get('/servers/export', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  },\n  // Clear all servers (admin only)\n  clearAllServers: async () => {\n    return api.delete('/servers/clear-all');\n  }\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users with pagination, sorting, and search\n  getUsers: async params => {\n    return api.get('/users', {\n      params\n    });\n  },\n  // Get a single user by ID\n  getUser: async id => {\n    return api.get(`/users/${id}`);\n  },\n  // Create a new user\n  createUser: async userData => {\n    return api.post('/auth/register', userData);\n  },\n  // Update an existing user\n  updateUser: async (id, userData) => {\n    return api.put(`/users/${id}`, userData);\n  },\n  // Delete a user\n  deleteUser: async id => {\n    return api.delete(`/users/${id}`);\n  }\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: async credentials => {\n    return api.post('/auth/login', credentials);\n  },\n  // Register\n  register: async userData => {\n    return api.post('/auth/register', userData);\n  },\n  // Get current user profile\n  getProfile: async () => {\n    return api.get('/auth/profile');\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    return api.put('/auth/profile', profileData);\n  },\n  // Change password\n  changePassword: async passwordData => {\n    return api.put('/auth/change-password', passwordData);\n  }\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: async params => {\n    return api.get('/activity-logs', {\n      params\n    });\n  },\n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  // Export logs to Excel\n  exportLogs: async params => {\n    return api.get('/activity-logs/export', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  // Clear all logs (admin only)\n  clearAllLogs: async () => {\n    return api.delete('/activity-logs/clear-all');\n  }\n};\n\n// Tracker related API calls\nexport const trackerApi = {\n  // Get all trackers with pagination\n  getTrackers: async params => {\n    return api.get('/trackers', {\n      params\n    });\n  },\n  // Get tracker items by parent ID\n  getTrackerItems: async parentId => {\n    return api.get(`/trackers/parent/${parentId}`);\n  },\n  // Get a single tracker by ID\n  getTracker: async id => {\n    return api.get(`/trackers/${id}`);\n  },\n  // Create a new tracker\n  createTracker: async trackerData => {\n    return api.post('/trackers', trackerData);\n  },\n  // Update an existing tracker\n  updateTracker: async (id, trackerData) => {\n    return api.put(`/trackers/${id}`, trackerData);\n  },\n  // Delete a tracker\n  deleteTracker: async id => {\n    return api.delete(`/trackers/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","serverApi","getServers","params","get","getServer","id","createServer","serverData","post","updateServer","put","deleteServer","delete","importServers","formData","getImportTemplate","responseType","exportServers","getDashboardStats","clearAllServers","userApi","getUsers","getUser","createUser","userData","updateUser","deleteUser","authApi","login","credentials","register","getProfile","updateProfile","profileData","changePassword","passwordData","activityLogApi","getLogs","getLogStats","exportLogs","clearAllLogs","trackerApi","getTrackers","getTrackerItems","parentId","getTracker","createTracker","trackerData","updateTracker","deleteTracker"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/NEW_1/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Server related API calls\nexport const serverApi = {\n  // Get all servers with pagination and filters\n  getServers: async (params?: any) => {\n    return api.get('/servers', { params });\n  },\n  \n  // Get a single server by ID\n  getServer: async (id: number) => {\n    return api.get(`/servers/${id}`);\n  },\n  \n  // Create a new server\n  createServer: async (serverData: any) => {\n    return api.post('/servers', serverData);\n  },\n  \n  // Update an existing server\n  updateServer: async (id: number, serverData: any) => {\n    return api.put(`/servers/${id}`, serverData);\n  },\n  \n  // Delete a server\n  deleteServer: async (id: number) => {\n    return api.delete(`/servers/${id}`);\n  },\n  \n  // Import servers from Excel file\n  importServers: async (formData: FormData) => {\n    return api.post('/servers/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n  \n  // Get import template\n  getImportTemplate: async () => {\n    return api.get('/servers/import-template', {\n      responseType: 'blob',\n    });\n  },\n  \n  // Export servers to Excel\n  exportServers: async (params?: any) => {\n    return api.get('/servers/export', {\n      params,\n      responseType: 'blob',\n    });\n  },\n  \n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  },\n  \n  // Clear all servers (admin only)\n  clearAllServers: async () => {\n    return api.delete('/servers/clear-all');\n  }\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users with pagination, sorting, and search\n  getUsers: async (params?: any) => {\n    return api.get('/users', { params });\n  },\n  \n  // Get a single user by ID\n  getUser: async (id: number) => {\n    return api.get(`/users/${id}`);\n  },\n  \n  // Create a new user\n  createUser: async (userData: any) => {\n    return api.post('/auth/register', userData);\n  },\n  \n  // Update an existing user\n  updateUser: async (id: number, userData: any) => {\n    return api.put(`/users/${id}`, userData);\n  },\n  \n  // Delete a user\n  deleteUser: async (id: number) => {\n    return api.delete(`/users/${id}`);\n  }\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: async (credentials: { username: string; password: string }) => {\n    return api.post('/auth/login', credentials);\n  },\n  \n  // Register\n  register: async (userData: any) => {\n    return api.post('/auth/register', userData);\n  },\n  \n  // Get current user profile\n  getProfile: async () => {\n    return api.get('/auth/profile');\n  },\n  \n  // Update user profile\n  updateProfile: async (profileData: any) => {\n    return api.put('/auth/profile', profileData);\n  },\n  \n  // Change password\n  changePassword: async (passwordData: { oldPassword: string; newPassword: string }) => {\n    return api.put('/auth/change-password', passwordData);\n  }\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: async (params?: any) => {\n    return api.get('/activity-logs', { params });\n  },\n  \n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  \n  // Export logs to Excel\n  exportLogs: async (params?: any) => {\n    return api.get('/activity-logs/export', {\n      params,\n      responseType: 'blob',\n    });\n  },\n  \n  // Clear all logs (admin only)\n  clearAllLogs: async () => {\n    return api.delete('/activity-logs/clear-all');\n  }\n};\n\n// Tracker related API calls\nexport const trackerApi = {\n  // Get all trackers with pagination\n  getTrackers: async (params?: any) => {\n    return api.get('/trackers', { params });\n  },\n  \n  // Get tracker items by parent ID\n  getTrackerItems: async (parentId: number) => {\n    return api.get(`/trackers/parent/${parentId}`);\n  },\n  \n  // Get a single tracker by ID\n  getTracker: async (id: number) => {\n    return api.get(`/trackers/${id}`);\n  },\n  \n  // Create a new tracker\n  createTracker: async (trackerData: any) => {\n    return api.post('/trackers', trackerData);\n  },\n  \n  // Update an existing tracker\n  updateTracker: async (id: number, trackerData: any) => {\n    return api.put(`/trackers/${id}`, trackerData);\n  },\n  \n  // Delete a tracker\n  deleteTracker: async (id: number) => {\n    return api.delete(`/trackers/${id}`);\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}