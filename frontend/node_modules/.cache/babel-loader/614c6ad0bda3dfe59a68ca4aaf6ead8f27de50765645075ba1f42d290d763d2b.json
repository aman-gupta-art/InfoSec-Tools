{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Log API responses for debugging\napi.interceptors.response.use(response => {\n  console.log(`API Response for ${response.config.url}:`, response);\n  return response;\n}, error => {\n  var _error$config;\n  console.error(`API Error for ${((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url) || 'unknown endpoint'}:`, error);\n  return Promise.reject(error);\n});\n\n// Server related API calls\nexport const serverApi = {\n  // Get all servers with pagination and filters\n  getServers: async params => {\n    console.log('Getting servers with params:', params);\n    return api.get('/servers', {\n      params\n    });\n  },\n  // Get a single server by ID\n  getServer: async id => {\n    return api.get(`/servers/${id}`);\n  },\n  // Create a new server\n  createServer: async serverData => {\n    return api.post('/servers', serverData);\n  },\n  // Update an existing server\n  updateServer: async (id, serverData) => {\n    return api.put(`/servers/${id}`, serverData);\n  },\n  // Delete a server\n  deleteServer: async id => {\n    return api.delete(`/servers/${id}`);\n  },\n  // Import servers from Excel file\n  importServers: async formData => {\n    return api.post('/servers/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get import template\n  getImportTemplate: async () => {\n    return api.get('/servers/import-template', {\n      responseType: 'blob'\n    });\n  },\n  // Export servers to Excel\n  exportServers: async params => {\n    return api.get('/servers/export', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    return api.get('/servers/dashboard-stats');\n  },\n  // Get distinct values for filters\n  getFilterOptions: async fields => {\n    console.log('Getting filter options for fields:', fields);\n    return api.get('/servers/filter-options', {\n      params: {\n        fields: fields\n      }\n    });\n  },\n  // Clear all servers (admin only)\n  clearAllServers: async () => {\n    return api.delete('/servers/clear-all');\n  }\n};\n\n// User related API calls\nexport const userApi = {\n  // Get all users with pagination, sorting, and search\n  getUsers: async params => {\n    return api.get('/users', {\n      params\n    });\n  },\n  // Get a single user by ID\n  getUser: async id => {\n    return api.get(`/users/${id}`);\n  },\n  // Create a new user\n  createUser: async userData => {\n    return api.post('/auth/register', userData);\n  },\n  // Update an existing user\n  updateUser: async (id, userData) => {\n    return api.put(`/users/${id}`, userData);\n  },\n  // Delete a user\n  deleteUser: async id => {\n    return api.delete(`/users/${id}`);\n  }\n};\n\n// Auth related API calls\nexport const authApi = {\n  // Login\n  login: async credentials => {\n    return api.post('/auth/login', credentials);\n  },\n  // Register\n  register: async userData => {\n    return api.post('/auth/register', userData);\n  },\n  // Get current user profile\n  getProfile: async () => {\n    return api.get('/auth/profile');\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    return api.put('/auth/profile', profileData);\n  },\n  // Change password\n  changePassword: async passwordData => {\n    return api.put('/auth/change-password', passwordData);\n  }\n};\n\n// Activity log related API calls\nexport const activityLogApi = {\n  // Get all logs with pagination and filters\n  getLogs: async params => {\n    return api.get('/activity-logs', {\n      params\n    });\n  },\n  // Get log statistics\n  getLogStats: async () => {\n    return api.get('/activity-logs/stats');\n  },\n  // Export logs to Excel\n  exportLogs: async params => {\n    return api.get('/activity-logs/export', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  // Clear all logs (admin only)\n  clearAllLogs: async () => {\n    return api.delete('/activity-logs/clear-all');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","console","log","url","_error$config","serverApi","getServers","params","get","getServer","id","createServer","serverData","post","updateServer","put","deleteServer","delete","importServers","formData","getImportTemplate","responseType","exportServers","getDashboardStats","getFilterOptions","fields","clearAllServers","userApi","getUsers","getUser","createUser","userData","updateUser","deleteUser","authApi","login","credentials","register","getProfile","updateProfile","profileData","changePassword","passwordData","activityLogApi","getLogs","getLogStats","exportLogs","clearAllLogs"],"sources":["C:/Users/pimsupport/Desktop/Projects/PROD/InfoSec-Tools/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Log API responses for debugging\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`API Response for ${response.config.url}:`, response);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error(`API Error for ${error.config?.url || 'unknown endpoint'}:`, error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Server related API calls\r\nexport const serverApi = {\r\n  // Get all servers with pagination and filters\r\n  getServers: async (params) => {\r\n    console.log('Getting servers with params:', params);\r\n    return api.get('/servers', { params });\r\n  },\r\n  \r\n  // Get a single server by ID\r\n  getServer: async (id) => {\r\n    return api.get(`/servers/${id}`);\r\n  },\r\n  \r\n  // Create a new server\r\n  createServer: async (serverData) => {\r\n    return api.post('/servers', serverData);\r\n  },\r\n  \r\n  // Update an existing server\r\n  updateServer: async (id, serverData) => {\r\n    return api.put(`/servers/${id}`, serverData);\r\n  },\r\n  \r\n  // Delete a server\r\n  deleteServer: async (id) => {\r\n    return api.delete(`/servers/${id}`);\r\n  },\r\n  \r\n  // Import servers from Excel file\r\n  importServers: async (formData) => {\r\n    return api.post('/servers/import', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n  \r\n  // Get import template\r\n  getImportTemplate: async () => {\r\n    return api.get('/servers/import-template', {\r\n      responseType: 'blob',\r\n    });\r\n  },\r\n  \r\n  // Export servers to Excel\r\n  exportServers: async (params) => {\r\n    return api.get('/servers/export', {\r\n      params,\r\n      responseType: 'blob',\r\n    });\r\n  },\r\n  \r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    return api.get('/servers/dashboard-stats');\r\n  },\r\n  \r\n  // Get distinct values for filters\r\n  getFilterOptions: async (fields) => {\r\n    console.log('Getting filter options for fields:', fields);\r\n    return api.get('/servers/filter-options', {\r\n      params: { fields: fields }\r\n    });\r\n  },\r\n  \r\n  // Clear all servers (admin only)\r\n  clearAllServers: async () => {\r\n    return api.delete('/servers/clear-all');\r\n  }\r\n};\r\n\r\n// User related API calls\r\nexport const userApi = {\r\n  // Get all users with pagination, sorting, and search\r\n  getUsers: async (params) => {\r\n    return api.get('/users', { params });\r\n  },\r\n  \r\n  // Get a single user by ID\r\n  getUser: async (id) => {\r\n    return api.get(`/users/${id}`);\r\n  },\r\n  \r\n  // Create a new user\r\n  createUser: async (userData) => {\r\n    return api.post('/auth/register', userData);\r\n  },\r\n  \r\n  // Update an existing user\r\n  updateUser: async (id, userData) => {\r\n    return api.put(`/users/${id}`, userData);\r\n  },\r\n  \r\n  // Delete a user\r\n  deleteUser: async (id) => {\r\n    return api.delete(`/users/${id}`);\r\n  }\r\n};\r\n\r\n// Auth related API calls\r\nexport const authApi = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    return api.post('/auth/login', credentials);\r\n  },\r\n  \r\n  // Register\r\n  register: async (userData) => {\r\n    return api.post('/auth/register', userData);\r\n  },\r\n  \r\n  // Get current user profile\r\n  getProfile: async () => {\r\n    return api.get('/auth/profile');\r\n  },\r\n  \r\n  // Update user profile\r\n  updateProfile: async (profileData) => {\r\n    return api.put('/auth/profile', profileData);\r\n  },\r\n  \r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    return api.put('/auth/change-password', passwordData);\r\n  }\r\n};\r\n\r\n// Activity log related API calls\r\nexport const activityLogApi = {\r\n  // Get all logs with pagination and filters\r\n  getLogs: async (params) => {\r\n    return api.get('/activity-logs', { params });\r\n  },\r\n  \r\n  // Get log statistics\r\n  getLogStats: async () => {\r\n    return api.get('/activity-logs/stats');\r\n  },\r\n  \r\n  // Export logs to Excel\r\n  exportLogs: async (params) => {\r\n    return api.get('/activity-logs/export', {\r\n      params,\r\n      responseType: 'blob',\r\n    });\r\n  },\r\n  \r\n  // Clear all logs (admin only)\r\n  clearAllLogs: async () => {\r\n    return api.delete('/activity-logs/clear-all');\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}